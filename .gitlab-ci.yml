workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_commit_request"
      when: never
    - when: always

variables:
    APP_PORT_IN_URL: 3000
    APP_IMAGE_NAME: $CI_REGISTRY_IMAGE
    REGISTRY_LOGIN: docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
  - test
  - build
  - deploy

.unit_testing:
  image: node:16-alpine
  stage: test
  cache:
    paths:
      - app/modules
  script:
    - cd app
    - npm install
    - npm run test

image_build_push:
  image: docker:27.4.0-rc.2-cli
  services:
    - docker:27.4.0-rc.2-dind
  stage: build
  script:
    - apk add --no-cache jq httpie
    - export JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$JSON_VERSION.$CI_PIPELINE_ID
    - echo $VERSION
    - echo "VERSION=$VERSION" >> environmental_variables.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION .
    - docker push $CI_REGISTRY_IMAGE:$VERSION
  artifacts:
    reports:
      dotenv: environmental_variables.env


container_deploying:
  image: docker:dind
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY ./docker-compose.yaml ec2-user@$EC2_LOGIN:/home/ec2-user
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ec2-user@$EC2_LOGIN "
        $REGISTRY_LOGIN &&
        export DC_IMAGE=$CI_REGISTRY_IMAGE
        export DC_VERSION=$VERSION
        export DC_HOST_PORT=$HOST_PORT &&
        docker-compose -f docker-compose.yaml down &&
        docker-compose -f docker-compose.yaml up -d"
  variables:
        HOST_PORT: $APP_PORT_IN_URL
  environment:
        name: production
        url: http://$EC2_LOGIN:$HOST_PORT




